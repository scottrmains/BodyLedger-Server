name: CI/CD Pipeline
on:
  push:
    branches:
      - master # Change this to your default branch
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      # Step 4: Build and push Docker images
      - name: Build and push Docker images
        run: |
          docker compose build
          docker compose push
      
      # Step 5: Create necessary configuration files locally
      - name: Create nginx configuration
        run: |
          # Create nginx.conf
          cat > nginx.conf << 'EOL'
          user  nginx;
          worker_processes  auto;

          error_log  /var/log/nginx/error.log notice;
          pid        /var/run/nginx.pid;

          events {
              worker_connections  1024;
          }

          http {
              include       /etc/nginx/mime.types;
              default_type  application/octet-stream;

              log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                '$status $body_bytes_sent "$http_referer" '
                                '"$http_user_agent" "$http_x_forwarded_for"';

              access_log  /var/log/nginx/access.log  main;

              sendfile        on;
              keepalive_timeout  65;

              server {
                  listen 80;
                  server_name yourdomain.com www.yourdomain.com;
                  
                  location / {
                      return 301 https://$host$request_uri;
                  }
              }

              server {
                  listen 443 ssl;
                  server_name api.trackspace.pro;
                  
                  ssl_certificate /etc/nginx/ssl/certificate.crt;
                  ssl_certificate_key /etc/nginx/ssl/private.key;
                  
                  ssl_protocols TLSv1.2 TLSv1.3;
                  ssl_prefer_server_ciphers on;
                  ssl_session_timeout 1d;
                  ssl_session_cache shared:SSL:10m;
                  
                  location / {
                      proxy_pass http://api:5000;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection keep-alive;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                      proxy_cache_bypass $http_upgrade;
                  }
              }
          }
          EOL
          
          # Create directory for SSL
          mkdir -p ssl
          
          # Create certificate files using GitHub secrets
          echo "${{ secrets.SSL_CERTIFICATE }}" > ssl/certificate.crt
          echo "${{ secrets.SSL_PRIVATE_KEY }}" > ssl/private.key
          
          # Ensure docker-compose.yml uses the correct volume mounts
          if ! grep -q "/etc/nginx/nginx.conf" docker-compose.yml; then
            sed -i 's|./nginx.conf:/etc/nginx/conf.d/default.conf|./nginx.conf:/etc/nginx/nginx.conf|g' docker-compose.yml
          fi
          
          cat docker-compose.yml
      
      # Step 6: Upload all files to Droplet
      - name: Upload files to Droplet
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.DIGITALOCEAN_DROPLET_IP }}
          username: root
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: 22
          source: "./docker-compose.yml,./nginx.conf,./ssl"
          target: "/opt/bodyledger/"
          overwrite: true
          strip_components: 0
      
      # Step 7: Deploy to Droplet via SSH
      - name: Deploy to Droplet
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.DIGITALOCEAN_DROPLET_IP }}
          username: root
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: 22
          script: |
            cd /opt/bodyledger
            ls -la
            chmod 600 /opt/bodyledger/ssl/private.key
            docker compose pull
            docker compose down
            docker compose up -d
